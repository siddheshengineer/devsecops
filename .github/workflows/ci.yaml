name: Secure CI pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/deployment.yaml' # Ignore changes to this file for inf loop
  pull_request:
    branches: [ main ]

env:
  node-version: '20'

jobs:
  test:
    name: Unit testing
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run test cases
        run: npm run test

      - name: Linting
        run: npm run lint
      
  # SAST: 
  #   name: Static Application Security Testing
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Code checkout
  #       uses: actions/checkout@v4

  #     - name: Qodana scan
  #       uses: JetBrains/qodana-action@v2023.3
  #       with:
  #         args: --apply-fixes
  #         pr-mode: false
  #       env:
  #         QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
  
  # build:
  #   name: build
  #   runs-on: ubuntu-latest
  #   needs: [ test ] # [ test, SAST ]

  #   steps:
  #     - name: Code checkout
  #       uses: actions/checkout@v4
      
  #     - name: Install Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.node-version }}
  #         cache: 'npm'
      
  #     - name: Install dependencies
  #       run: npm ci
      
  #     - name: Build the application
  #       run: npm run build
      
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: dist/
  
  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [test] # [build]
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}

    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY}}
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_TOKEN }}
        
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          load: true
        
      - name: Run vulnerability scan (Trivy)
        uses: aquasecurity/trivy-action@0.30.0
        with: 
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'
      
      - name: Push images to GHCR
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}
      
      - name: Output Image name
        run: echo "image_tag=$(echo ${{ github.run_number }})" >> $GITHUB_OUTPUT
      


      
      

      